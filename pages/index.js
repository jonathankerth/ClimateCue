import Image from "next/image";
import { BsSearch } from "react-icons/bs";
import Head from "next/head";
import axios from "axios";
import { useState, useEffect } from "react";
import Weather from "../components/Weather";
import FiveDayForecast from "@/components/FiveDayForecast";

export default function Home() {
	const [city, setCity] = useState("");
	const [weather, setWeather] = useState({});
	const [forecast, setForecast] = useState([]);
	const [loading, setLoading] = useState(false);
	const [error, setError] = useState(null);

	const fetchWeather = async (e) => {
		e.preventDefault();
		console.log("fetchWeather called");
		if (!city) {
			setError("City name cannot be empty");
			return;
		}
		setLoading(true);
		try {
			const geocodingUrl = `https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`;
			const geocodingResponse = await axios.get(geocodingUrl);

			if (geocodingResponse.data.length === 0) {
				throw new Error("City not found");
			}

			const { lat, lon, country, state } = geocodingResponse.data[0];

			// Fetch current weather
			const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=imperial&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`;
			const weatherResponse = await axios.get(weatherUrl);
			setWeather({
				...weatherResponse.data,
				country,
				state,
			});

			// Fetch 5-day forecast
			const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=imperial&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`;
			const forecastResponse = await axios.get(forecastUrl);
			if (forecastResponse.data && forecastResponse.data.list) {
				const dailyData = forecastResponse.data.list.filter(
					(forecast) => new Date(forecast.dt * 1000).getUTCHours() === 12
				);
				setForecast(dailyData);
			} else {
				setForecast([]);
			}

			setError(null);
		} catch (error) {
			setError(error.message);
		} finally {
			setLoading(false);
		}
	};

	const fetchRandomWeather = async () => {
		setLoading(true);
		try {
			const min_population = 2697000;
			const max_population = 100000000;

			const cityUrl = `https://api.api-ninjas.com/v1/city?min_population=${min_population}&max_population=${max_population}&limit=30`;
			const cityResponse = await axios.get(cityUrl, {
				headers: { "X-Api-Key": process.env.NEXT_PUBLIC_API_NINJA_KEY },
			});
			const cities = cityResponse.data;

			const randomCity = cities[Math.floor(Math.random() * cities.length)];

			const geocodingUrl = `https://api.openweathermap.org/geo/1.0/direct?q=${randomCity.name}&limit=1&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`;
			const geocodingResponse = await axios.get(geocodingUrl);
			const { lat, lon, country, state } = geocodingResponse.data[0];

			// Fetch current weather
			const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=imperial&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`;
			const weatherResponse = await axios.get(weatherUrl);
			setWeather({
				...weatherResponse.data,
				country,
				state,
			});

			// Fetch 5-day forecast
			const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=imperial&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`;
			const forecastResponse = await axios.get(forecastUrl);
			if (forecastResponse.data && forecastResponse.data.list) {
				const dailyData = forecastResponse.data.list.filter(
					(forecast) => new Date(forecast.dt * 1000).getUTCHours() === 12
				);
				setForecast(dailyData);
			} else {
				setForecast([]);
			}

			setError(null);
		} catch (error) {
			setError(error.message);
		} finally {
			setLoading(false);
		}
	};
	useEffect(() => {
		console.log("Component mounted, fetching random weather");
		fetchRandomWeather();
	}, []);

	return (
		<div className="relative min-h-screen">
			<Head>
				<title>Weather - Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className="absolute top-0 left-0 right-0 bottom-0 bg-black/40 z-0" />

			<Image
				src="https://images.unsplash.com/photo-1580193769210-b8d1c049a7d9?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1474&q=80"
				alt="background img"
				layout="fill"
				className="object-cover z-[-1]"
			/>

			<div className="relative z-10">
				<div className="flex justify-between items-center max-w-[500px] w-full m-auto  mb-8 pt-4 px-4 text-white">
					<form
						onSubmit={fetchWeather}
						className="flex justify-between items-center w-full m-auto p-3 bg-white bg-opacity-60 shadow-lg rounded-2xl space-x-2"
					>
						<div className="flex-grow">
							<input
								onChange={(e) => setCity(e.target.value)}
								value={city}
								className="w-full px-2 py-1 text-black focus:outline-none text-xl rounded-md"
								type="text"
								placeholder="Search city"
							/>
						</div>
						<button
							type="submit"
							className="p-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md"
						>
							<BsSearch size={20} />
						</button>
						<button
							type="button"
							onClick={fetchRandomWeather}
							className="p-2 bg-gray-500 hover:bg-gray-600 text-white rounded-md"
						>
							Random City
						</button>
					</form>
				</div>

				{Object.keys(weather).length !== 0 && <Weather data={weather} />}
				{forecast.length > 0 && (
					<div className="p-4">
						<FiveDayForecast forecast={forecast} />
					</div>
				)}

				{loading && <div className="text-center text-white">Loading...</div>}
				{error && (
					<div className="mt-2 bg-red-500 text-white py-2 px-4 rounded-md text-center">
						{error}
					</div>
				)}
			</div>
		</div>
	);
}
